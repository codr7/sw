C P S / L R

* fib
** +
** >

define: fib (Int Int Int;Int) do:
  RC 1 >
  if: dec LCL + recall
  else: 1 = if S;
  P;

10000 benchmark: 50 0 1 fib P; say

* CL
1 2 3
3 1 2 3
insert

* LCL
1 2 3
3 2 1 2
swap push

* RC
1 2 3
2 3 1 1
remove push push

* LC
1 2 3
3 1 2 2
swap insert push

* move ValueType.findId to LookupTrait

* add pair literals
** form
** reader
** use as description
1:2

* add splat method (*)
** add to id reader
** push items in reverse order
** add seq trait
*** add iter protocol
*** add iter type

* add stack macro
** push copy of current stack

* add with: macro
** use _ to move values
4 [1 2} with: S 3 _ 5;
`[2 1 3 4 5]`


* add load macro

* add dump-stack method
* add dump-call-stack

* add IdType/LiteralType
** derive formType
** add form.valuetype: ValueType

* add permutations
** aoc24/7
** iter of iters

* more macros
** RC
** LCL

* native json5
** to/from-js5
